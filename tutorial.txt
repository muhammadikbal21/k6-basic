K6 -> install: https://grafana.com/docs/k6/latest/set-up/install-k6/
module ppt -> https://docs.google.com/presentation/d/1L8_Z0Kq26alF-k97Cr0luQUXRpcsa9PXqA16111-jlk/edit#slide=id.p
link youtube -> https://www.youtube.com/watch?v=VGO5CfOve90

1. buat direktori dan masuk ke direktori tsb
2. ketik npm init, lalu enter-enter saja kecuali author ketik saja nama sendiri dan type nya ketik module
3. setelah itu install library nya:
 - npm install k6
 - npm install --save-dev @types/k6
4. buat file menggunakan command -> k6 new namafolder/namafile.js
5. run file nya -> k6 run namafolder/namafile.js
6. run file beserta summary outputnya -> k6 run namafolder/namafile.js --summary-export lokasi-output.json
 (contoh: k6 run src/ping.js --summary-export report.json)
 informasi output atau result pada log terminal setelah di running -> https://grafana.com/docs/k6/latest/using-k6/metrics/reference/ 
7. run file menggunakan realtime output -> k6 run --out json=test_results.csv script.js
 (contoh: k6 run --out json=realtime-report.json src/ping.js)
 perbedaan menggunakan realtime output dan summary output adalah: 
  - realtime output langsung ter-create dan mencatat log nya ketika script masih berlangsung
  - summary output belum meng-create log nya ketika script masih berlangsung dan harus menunggu sampai selesai dijalankan untuk ter-create report nya
 realtime report biasanya digunakan bersamaan third-party 
8. informasi fitur web dashboard untuk melihat realtime output nya -> https://grafana.com/docs/k6/latest/results-output/web-dashboard/
9. run web dashboard dengan OS Linux/Unix/MacOS -> K6_WEB_DASHBOARD=true k6 run script.js
   Windows -> set K6_WEB_DASHBOARD=true 
              k6 run --out web-dashboard src/ping.js (klik port localhost nya yang ada di terminal)
10. Stages adalah fitur untuk meningkatkan atau menurunkan virtual user ketika melakukan pengujian menggunakan atribut stages. 
    Dengan ini kita bisa meningkatkan jumlah user dalam durasi tertentu, dan menurunkan user dalam durasi tertentu.
    informasi stages -> https://grafana.com/docs/k6/latest/using-k6/k6-options/reference/#stages
11. informasi http k6 -> https://grafana.com/docs/k6/latest/javascript-api/k6-http/
12. implement JSON Server dan JSON Web Token (JWT)
    npm install json-server@0.17.4 jsonwebtoken
    running json server nya untuk memastikan db yang baru saja dibuat -> json-server --watch db.json --port 3000
    buat file server.js lalu running server nya -> node server.js
    Karena di server.js udah ada semua fungsionalitas JSON Server + JWT, jadi nggak perlu jalankan json-server --watch db.json --port 3000 lagi.
13. fail() adalah library k6. ini digunakan untuk memastikan ketika ada testingan yang gagal, dia tidak akan melanjutkan code setelah nya
14. check() adalah library k6 yang digunakan sebagai assertion dalam load test atau stress test
    http_req_failed yang ada di terminal adalah total persentase dari seluruh req yang di running dalam 1 file (global)
15. k6/execution adalah modul di K6 yang menyediakan akses ke informasi eksekusi saat ini, seperti Virtual User (VU) ID, Instance ID, dan Scenario yang sedang berjalan.
    Modul ini sangat berguna ketika kamu ingin membuat skenario uji yang dinamis, misalnya:
    - Menggunakan VU ID untuk membuat data unik.
    - Menyesuaikan perilaku pengujian berdasarkan skenario yang berjalan.
    informasi execution -> https://grafana.com/docs/k6/latest/javascript-api/k6-execution/
16. Test Life Cycle memiliki tahapan init, setup, default function dan tearDown
    - Init adalah tahapan K6 membaca semua file script, ini akan dilakukan sekali saja dan wajib dilakukan.
    - Function setup(), dipanggil sekali di awal, digunakan untuk mempersiapkan data. Function setup() bisa mengembalikan data, yang nanti bisa digunakan oleh default function dan tidak wajib dibuat
    - Default function, dipanggil terus-menerus sampai waktu pengetesan selesai. Jika setup() function mengembalikan data, default function bisa menerima parameter data dan wajib dibuat
    - Function teardown(), dieksekusi setelah pengujian selesai dan tidak wajib dibuat
17. Environment Variable -> untuk menggunakan Environment Variable adalah __ENV.NAMA_VARIABLE
18. Scenario berfungsi untuk menjalankan beberapa script dalam 1 perintah / 1 file js
    Scenario memiliki banyak jenis executor, secara garis besar terbagi menjadi tiga bagian:
    - Berdasarkan jumlah iterasi (number of iteration)
    - Berdasarkan jumlah virtual user (number of VU), dan
    - Berdasarkan kapasitas iterasi (iteration rate)
    Kekurangan Scenario adalah tidak bisa membedakan setup dan teardown function per scenario.
    Jika kita menggunakan setup dan teardown function, maka kita akan menggunakan function yang sama untuk semua scenario
    informasi scenario -> https://grafana.com/docs/k6/latest/using-k6/scenarios/

    a. number of iterations
    perbedaan pembagian iteration pada shared-iterations dan per-vu-iterations:
    - shared-iterations bisa saja pembagian iterasi setiap user berbeda karena tiap user memiliki response time yang berbeda.
    informasi shared-iterations -> https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/shared-iterations/
    - per-vu-iterations sudah pasti pembagian iterasi rata ke setiap user
    informasi per-vu-iterations -> https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/per-vu-iterations/

    b. number of virtual user
    - constant-vus -> executor yang ditentukan jumlah virtual user, dan tiap virtual user akan selalu melakukan melakukan iterasi sampai durasi waktu yang sudah ditentukan
    informasi constant-vus -> https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/constant-vus/ 
    - ramping-vus -> executor yang akan membuat virtual user sejumlah yang ditentukan di tiap stage, dan akan bergerak naik atau turun mengikuti stage selanjutnya, semua stage selesai
    informasi ramping-vus -> https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/ramping-vus 

    c. iteration rate
    - constant-arrival-rate -> executor yang akan melakukan iterasi secara constant sejumlah yang ditentukan, misal kita tentukan 100 iterasi per 1 detik selama 30 detik, artinya tiap 1 detik akan melakukan 100 iterasi selama 30 detik
    informasi constant-arrival-rate -> https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/constant-arrival-rate
    - ramping-arrival-rate -> executor yang sama seperti constant-arrival-rate, hanya saja jumlah iterasi bisa naik dan turun mengikuti stage yang ditentukan
    informasi ramping-arrival-rate -> https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/ramping-arrival-rate 

